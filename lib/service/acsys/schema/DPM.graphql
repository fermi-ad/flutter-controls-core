schema {
    query: QueryRoot
    mutation: MutationRoot
    subscription: SubscriptionRoot
}

scalar Timestamp

"""
This structure holds information associated with a device's reading, A "reading" is the latest value of any of a device's properties.
"""
type DataInfo {
    """
    Timestamp representing when the data was sampled. This value is provided as milliseconds since 1970, UTC.
    """
    timestamp: Timestamp!

    """
    The value of the device when sampled.
    """
    result: DataType!

    """
    The device's index (in the device database.)
    """
    di: Int!

    """
    The name of the device.
    """
    name: String!
}

"""
This structure wraps a device reading with some routing information: a `refId` to correlate which device, in the array of devices passed, this reply is for. It also has a `cycle` field so that reading from different devices can correlate which cycle they correspond.
"""
type DataReply {
    """
    This is an index to indicate which entry, in the passed array of DRF strings, this reply corresponds.
    """
    refId: Int!

    """
    The cycle number in which the device was sampled. This can be used to correlate readings from several devices.
    """
    cycle: Int!

    """
    The returned data.
    """
    data: DataInfo!
}

"""
The control system supports several types and this entity can repesent any of them.
"""
union DataType =
      StatusReply
    | Scalar
    | ScalarArray
    | Raw
    | Text
    | TextArray
    | StructData

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

input DevValue {
    intVal: Int
    scalarVal: Float
    scalarArrayVal: [Float!]
    rawVal: [Int!]
    textVal: String
    textArrayVal: [String!]
}

"""
A structure containing device information.
"""
type DeviceInfo {
    """
    A text field that summarizes the device's purpose.
    """
    description: String!

    """
    Holds informations related to the reading property. If the device doesn't have a reading property, this field will be `null`.
    """
    reading: DeviceProperty

    """
    Holds informations related to the setting property. If the device doesn't have a setting property, this field will be `null`.
    """
    setting: DeviceProperty
    digControl: DigControl
    digStatus: DigStatus
}

"""
The reply to the deviceInfo query.
"""
type DeviceInfoReply {
    result: [DeviceInfoResult!]!
}

"""
The result of the device info query. It can return device information or an error message describing why information wasn't returned.
"""
union DeviceInfoResult = DeviceInfo | ErrorReply

"""
Holds data associated with a property of a device.
"""
type DeviceProperty {
    """
    Specifies the engineering units for the primary transform of the device. This field might be `null`, if there aren't units for this transform.
    """
    primaryUnits: String

    """
    Specifies the engineering units for the common transform of the device. This field might be `null`, if there aren't units for this transform.
    """
    commonUnits: String
}

"""
Describes the digital control commands for a device.
"""
type DigControl {
    entries: [DigControlEntry!]!
}

"""
Describes one digital control command used by a device. `name` is the name of the command and can be used by applications to create a descriptive menu. `value` is the actual integer value to send to the device in order to perform the command.
"""
type DigControlEntry {
    value: Int!
    shortName: String!
    longName: String!
}

type DigExtStatusEntry {
    bitNo: Int!
    color0: Int!
    name0: String!
    color1: Int!
    name1: String!
    description: String!
}

type DigStatus {
    entries: [DigStatusEntry!]!
    extEntries: [DigExtStatusEntry!]!
}

type DigStatusEntry {
    maskVal: Int!
    matchVal: Int!
    invert: Boolean!
    shortName: String!
    longName: String!
    trueStr: String!
    trueColor: Int!
    trueChar: String!
    falseStr: String!
    falseColor: Int!
    falseChar: String!
}

type ErrorReply {
    message: String!
}

"""
Contains information about a clock event that occurred.
"""
type EventInfo {
    timestamp: Timestamp!
    event: Int!
}

type MutationRoot {
    """
    Sends a setting to a device.

    Not all devices can be set -- most are read-only. For ACNET devices, the `device` string should use DRF notation to specify one of the two settable properties: `.SETTING` and `.CONTROL`.
    """
    setDevice(device: String!, value: DevValue!): StatusReply!
}

type QueryRoot {
    """
    Retrieve the next data point for the specified devices. Depending upon the event in the DRF string, the data may come back immediately or after a delay.
    """
    acceleratorData(drfs: [String!]!): [DataReply!]!

    """
    Retrieves device information. The parameter specifies the device. The reply will contain the device's information or an error status indicating why the query failed.
    """
    deviceInfo(devices: [String!]!): DeviceInfoReply!
}

type Raw {
    rawValue: [Int!]!
}

type Scalar {
    scalarValue: Float!
}

type ScalarArray {
    scalarArrayValue: [Float!]!
}

type StatusReply {
    status: Int!
}

type StructData {
    key: String!
    structValue: DataType!
}

type SubscriptionRoot {
    acceleratorData(drfs: [String!]!): DataReply!
    reportEvents(events: [Int!]!): EventInfo!
}

type Text {
    textValue: String!
}

type TextArray {
    textArrayValue: [String!]!
}
